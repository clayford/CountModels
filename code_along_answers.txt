## CODE ALONG 1

Run the following lines of code to generate y which is a count conditional on variables "grp" and "x1". "grp" is a binary indicator that takes two values: "a" and "b". "x1" is a numeric value ranging uniformly from 1 to 10.

```{r}
set.seed(4)
grp <- sample(c("a","b"), size = 300, replace = T)
x1 <- runif(n = 300, min = 1, max = 10)
y <- rpois(n = 300, lambda = exp(1.8 + 1.5*(grp=="b") + -0.6*x1))
```

Add a new R code chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I* (Win/Linux) or *Cmd+Option+I* (Mac).  

1. Fit a model that attempts to "recover" the true values in the model specified above. Call the model 'mod2'

```{r}
mod2 <- glm(y ~ grp + x1, family = poisson)
summary(mod2)
```



## CODE ALONG 2


1. Add kids to the previous model and save the result as `phd.pois2`:

```
phd.pois <- glm(articles ~ gender + mentor, 
                data = d, family = poisson)
```

```{r}
phd.pois2 <- glm(articles ~ gender + mentor + kids, 
                data = d, family = poisson)
summary(phd.pois2)
```


2. Interpret the coefficient for kids

```{r}
exp(confint(phd.pois2)) - 1
```

Each additional child under the age of 6 that a PhD student has can expect to reduce the count of published articles by 7 to 19%.



## CODE ALONG 3



1. Add married and prestige to the following model and save as a new model object named "phd.pois3".

```
phd.pois <- glm(articles ~ gender + mentor + kids, data = d, family = poisson)
```

```{r}
phd.pois3 <- glm(articles ~ gender + mentor + kids + married + prestige, 
                 data = d, family = poisson)
```


2. Create a rootogram of the model

```{r}
topmodels::rootogram(phd.pois3)
```



## CODE ALONG 4

Add a new R code chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I* (Win/Linux) or *Cmd+Option+I* (Mac). 

Recall the distribution of PhD articles. Might there be 0 inflation? Maybe some candidates are trying to publish but haven't just yet. And there may be others who have no intention to publish. Two sources of zeroes.

```{r}
plot(table(d$articles))

```

1. Fit a zero-inflated _negative binomial_ model using all predictors for both models. Call it "phd.zinb". Use `dist = "negbin"`

```{r}
phd.zinb <- pscl::zeroinfl(articles ~ ., data = d, dist = "negbin")
summary(phd.zinb)
```


2. Compare the zero-inflated negative binomial model to the negative binomial model we fit earlier (phd.nb) using AIC and BIC.

```{r}
AIC(phd.nb, phd.zinb)
BIC(phd.nb, phd.zinb)
```


3. Compare rootograms for the two models.

```{r}
topmodels::rootogram(phd.nb)
```

```{r}
topmodels::rootogram(phd.zinb)
```


## CODE ALONG 5


1. Model articles as a function of mentor, gender, prestige and the interaction of gender and prestige as a negative binomial count model, and look at the summary.

```{r}
phd.nb3 <- glm.nb(articles ~ mentor + gender + prestige + 
                   gender:prestige, data = d)
summary(phd.nb3)
```

2. Create an effect plot to visualize the interaction between prestige and gender.

```{r}
ggpredict(phd.nb3, terms = c("prestige", "gender")) |> 
  plot()
```



